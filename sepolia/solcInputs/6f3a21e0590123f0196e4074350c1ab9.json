{
  "language": "Solidity",
  "sources": {
    "contracts/L1/SecurityCouncil.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport { MultiSigWallet } from \"../universal/MultiSigWallet.sol\";\nimport { Semver } from \"../universal/Semver.sol\";\n\n/**\n * @custom:proxied\n * @title SecurityCouncil\n * @notice SecurityCouncil receives validation requests for specific output data,\n *         and allows security council parties to validate & agree on transactions before execution.\n */\ncontract SecurityCouncil is MultiSigWallet, Semver {\n    /**\n     * @notice The address of the colosseum contract. Can be updated via upgrade.\n     */\n    address public immutable COLOSSEUM;\n\n    /**\n     * @notice Emitted when a validation request is submitted.\n     *\n     * @param transactionId Index of the submitted transaction.\n     * @param outputRoot    L2 output root that was proven against.\n     * @param l2BlockNumber The L2 block number of the output root.\n     */\n    event ValidationRequested(\n        uint256 indexed transactionId,\n        bytes32 outputRoot,\n        uint128 l2BlockNumber\n    );\n\n    /**\n     * @notice Disallow calls from anyone except Colosseum.\n     */\n    modifier onlyColosseum() {\n        require(\n            msg.sender == COLOSSEUM,\n            \"SecurityCouncil: only the colosseum contract can be a sender\"\n        );\n        _;\n    }\n\n    /**\n     * @custom:semver 0.1.0\n     *\n     * @param _colosseum Address of the Colosseum contract.\n     */\n    constructor(address _colosseum) Semver(0, 1, 0) {\n        COLOSSEUM = _colosseum;\n    }\n\n    /**\n     * @notice Initializer.\n     *\n     * @param ``                        Not used. Dummy parameter to prevent override.\n     * @param _owners                   List of initial owners.\n     * @param _numConfirmationsRequired Number of required confirmations.\n     *\n     */\n    function initialize(\n        bool,\n        address[] memory _owners,\n        uint256 _numConfirmationsRequired\n    ) public initializer {\n        MultiSigWallet.initialize(_owners, _numConfirmationsRequired);\n    }\n\n    /**\n     * @notice Allows the Colosseum to request for validate output data.\n     *\n     * @param _outputRoot    Output root byte data.\n     * @param _l2BlockNumber L2 block number corresponding to output.\n     * @param _data          Calldata for callback purpose.\n     */\n    function requestValidation(\n        bytes32 _outputRoot,\n        uint128 _l2BlockNumber,\n        bytes memory _data\n    ) public onlyColosseum {\n        uint256 transactionId = _addTransaction(msg.sender, 0, _data);\n        emit ValidationRequested(transactionId, _outputRoot, _l2BlockNumber);\n    }\n}\n"
    },
    "contracts/libraries/SafeCall.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @title SafeCall\n * @notice Perform low level safe calls\n */\nlibrary SafeCall {\n    /**\n     * @notice Perform a low level call without copying any returndata\n     *\n     * @param _target   Address to call\n     * @param _gas      Amount of gas to pass to the call\n     * @param _value    Amount of value to pass to the call\n     * @param _calldata Calldata to pass to the call\n     */\n    function call(\n        address _target,\n        uint256 _gas,\n        uint256 _value,\n        bytes memory _calldata\n    ) internal returns (bool) {\n        bool _success;\n        assembly {\n            _success := call(\n                _gas, // gas\n                _target, // recipient\n                _value, // ether value\n                add(_calldata, 32), // inloc\n                mload(_calldata), // inlen\n                0, // outloc\n                0 // outlen\n            )\n        }\n        return _success;\n    }\n\n    /**\n     * @notice Perform a low level call without copying any returndata. This function\n     *         will revert if the call cannot be performed with the specified minimum\n     *         gas.\n     *\n     * @param _target   Address to call\n     * @param _minGas   The minimum amount of gas that may be passed to the call\n     * @param _value    Amount of value to pass to the call\n     * @param _calldata Calldata to pass to the call\n     */\n    function callWithMinGas(\n        address _target,\n        uint256 _minGas,\n        uint256 _value,\n        bytes memory _calldata\n    ) internal returns (bool) {\n        bool _success;\n        assembly {\n            // Assertion: gasleft() >= ((_minGas + 200) * 64) / 63\n            //\n            // Because EIP-150 ensures that, a maximum of 63/64ths of the remaining gas in the call\n            // frame may be passed to a subcontext, we need to ensure that the gas will not be\n            // truncated to hold this function's invariant: \"If a call is performed by\n            // `callWithMinGas`, it must receive at least the specified minimum gas limit.\" In\n            // addition, exactly 51 gas is consumed between the below `GAS` opcode and the `CALL`\n            // opcode, so it is factored in with some extra room for error.\n            if lt(gas(), div(mul(64, add(_minGas, 200)), 63)) {\n                // Store the \"Error(string)\" selector in scratch space.\n                mstore(0, 0x08c379a0)\n                // Store the pointer to the string length in scratch space.\n                mstore(32, 32)\n                // Store the string.\n                //\n                // SAFETY:\n                // - We pad the beginning of the string with two zero bytes as well as the\n                // length (24) to ensure that we override the free memory pointer at offset\n                // 0x40. This is necessary because the free memory pointer is likely to\n                // be greater than 1 byte when this function is called, but it is incredibly\n                // unlikely that it will be greater than 3 bytes. As for the data within\n                // 0x60, it is ensured that it is 0 due to 0x60 being the zero offset.\n                // - It's fine to clobber the free memory pointer, we're reverting.\n                mstore(88, 0x0000185361666543616c6c3a204e6f7420656e6f75676820676173)\n\n                // Revert with 'Error(\"SafeCall: Not enough gas\")'\n                revert(28, 100)\n            }\n\n            // The call will be supplied at least (((_minGas + 200) * 64) / 63) - 49 gas due to the\n            // above assertion. This ensures that, in all circumstances, the call will\n            // receive at least the minimum amount of gas specified.\n            // We can prove this property by solving the inequalities:\n            // ((((_minGas + 200) * 64) / 63) - 49) >= _minGas\n            // ((((_minGas + 200) * 64) / 63) - 51) * (63 / 64) >= _minGas\n            // Both inequalities hold true for all possible values of `_minGas`.\n            _success := call(\n                gas(), // gas\n                _target, // recipient\n                _value, // ether value\n                add(_calldata, 32), // inloc\n                mload(_calldata), // inlen\n                0x00, // outloc\n                0x00 // outlen\n            )\n        }\n        return _success;\n    }\n}\n"
    },
    "contracts/libraries/Types.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n/**\n * @title Types\n * @notice Contains various types used throughout the Kroma contract system.\n */\nlibrary Types {\n    /**\n     * @notice CheckpointOutput represents a commitment to the state of L2 checkpoint. The timestamp\n     *         is the L1 timestamp that the output root is posted. This timestamp is used to verify\n     *         that the finalization period has passed since the output root was submitted.\n     *\n     * @custom:field submitter     Address of the output submitter.\n     * @custom:field outputRoot    Hash of the L2 output.\n     * @custom:field timestamp     Timestamp of the L1 block that the output root was submitted in.\n     * @custom:field l2BlockNumber L2 block number that the output corresponds to.\n     */\n    struct CheckpointOutput {\n        address submitter;\n        bytes32 outputRoot;\n        uint128 timestamp;\n        uint128 l2BlockNumber;\n    }\n\n    /**\n     * @notice Struct representing the elements that are hashed together to generate an output root\n     *         which itself represents a snapshot of the L2 state.\n     *\n     * @custom:field version                  Version of the output root.\n     * @custom:field stateRoot                Root of the state trie at the block of this output.\n     * @custom:field messagePasserStorageRoot Root of the message passer storage trie.\n     * @custom:field blockHash                Hash of the block this output was generated from.\n     * @custom:field nextBlockHash            Hash of the next block.\n     */\n    struct OutputRootProof {\n        bytes32 version;\n        bytes32 stateRoot;\n        bytes32 messagePasserStorageRoot;\n        bytes32 blockHash;\n        bytes32 nextBlockHash;\n    }\n\n    /**\n     * @notice Struct representing the elements that are hashed together to generate a public input.\n     *\n     * @custom:field blockHash        The hash of the block.\n     * @custom:field parentHash       The hash of the previous block.\n     * @custom:field timestamp        The block time.\n     * @custom:field number           The block number.\n     * @custom:field gasLimit         Maximum gas allowed.\n     * @custom:field baseFee          The base fee per gas.\n     * @custom:field transactionsRoot Root hash of the transactions.\n     * @custom:field stateRoot        Root hash of the state trie.\n     * @custom:field withdrawalsRoot  Root hash of the withdrawals.\n     * @custom:field txHashes         Array of hash of the transaction.\n     */\n    struct PublicInput {\n        bytes32 blockHash;\n        bytes32 parentHash;\n        uint64 timestamp;\n        uint64 number;\n        uint64 gasLimit;\n        uint256 baseFee;\n        bytes32 transactionsRoot;\n        bytes32 stateRoot;\n        bytes32 withdrawalsRoot;\n        bytes32[] txHashes;\n    }\n\n    /**\n     * @notice Struct representing the elements that are hashed together to generate a block hash.\n     *         Some of fields that are contained in PublicInput are omitted.\n     *\n     * @custom:field uncleHash    RLP encoded uncle hash.\n     * @custom:field coinbase     RLP encoded coinbase.\n     * @custom:field receiptsRoot RLP encoded receipts root.\n     * @custom:field logsBloom    RLP encoded logs bloom.\n     * @custom:field difficulty   RLP encoded difficulty.\n     * @custom:field gasUsed      RLP encoded gas used.\n     * @custom:field extraData    RLP encoded extra data.\n     * @custom:field mixHash      RLP encoded mix hash.\n     * @custom:field nonce        RLP encoded nonce.\n     */\n    struct BlockHeaderRLP {\n        bytes uncleHash;\n        bytes coinbase;\n        bytes receiptsRoot;\n        bytes logsBloom;\n        bytes difficulty;\n        bytes gasUsed;\n        bytes extraData;\n        bytes mixHash;\n        bytes nonce;\n    }\n\n    /**\n     * @notice Struct representing a deposit transaction (L1 => L2 transaction) created by an end\n     *         user (as opposed to a system deposit transaction generated by the system).\n     *\n     * @custom:field from        Address of the sender of the transaction.\n     * @custom:field to          Address of the recipient of the transaction.\n     * @custom:field isCreation  True if the transaction is a contract creation.\n     * @custom:field value       Value to send to the recipient.\n     * @custom:field mint        Amount of ETH to mint.\n     * @custom:field gasLimit    Gas limit of the transaction.\n     * @custom:field data        Data of the transaction.\n     * @custom:field l1BlockHash Hash of the block the transaction was submitted in.\n     * @custom:field logIndex    Index of the log in the block the transaction was submitted in.\n     */\n    struct UserDepositTransaction {\n        address from;\n        address to;\n        bool isCreation;\n        uint256 value;\n        uint256 mint;\n        uint64 gasLimit;\n        bytes data;\n        bytes32 l1BlockHash;\n        uint64 logIndex;\n    }\n\n    /**\n     * @notice Struct representing a withdrawal transaction.\n     *\n     * @custom:field nonce    Nonce of the withdrawal transaction\n     * @custom:field sender   Address of the sender of the transaction.\n     * @custom:field target   Address of the recipient of the transaction.\n     * @custom:field value    Value to send to the recipient.\n     * @custom:field gasLimit Gas limit of the transaction.\n     * @custom:field data     Data of the transaction.\n     */\n    struct WithdrawalTransaction {\n        uint256 nonce;\n        address sender;\n        address target;\n        uint256 value;\n        uint256 gasLimit;\n        bytes data;\n    }\n\n    /**\n     * @notice Struct representing a challenge.\n     *\n     * @custom:field turn       The current turn.\n     * @custom:field timeoutAt  Timeout timestamp of the next turn.\n     * @custom:field approved   Whether the challenge was approved.\n     * @custom:field asserter   Address of the asserter.\n     * @custom:field challenger Address of the challenger.\n     * @custom:field segments   Array of the segment.\n     * @custom:field segStart   The L2 block number of the first segment.\n     * @custom:field segSize    The number of L2 blocks.\n     * @custom:field outputRoot The L2 output root to be replaced.\n     */\n    struct Challenge {\n        uint8 turn;\n        uint64 timeoutAt;\n        bool approved;\n        address asserter;\n        address challenger;\n        bytes32[] segments;\n        uint256 segSize;\n        uint256 segStart;\n        bytes32 outputRoot;\n    }\n\n    /**\n     * @notice Struct representing a validator's bond.\n     *\n     * @custom:field amount    Amount of the lock.\n     * @custom:field expiresAt The expiration timestamp of bond.\n     */\n    struct Bond {\n        uint128 amount;\n        uint128 expiresAt;\n    }\n\n    /**\n     * @notice Struct representing multisig transaction data.\n     *\n     * @custom:field destination The destination address to run the transaction.\n     * @custom:field executed    Record whether a transaction was executed or not.\n     * @custom:field value       The value passed in while executing the transaction.\n     * @custom:field data        Calldata for transaction.\n     */\n    struct MultiSigTransaction {\n        address destination;\n        bool executed;\n        uint256 value;\n        bytes data;\n    }\n\n    /**\n     * @notice Struct representing the data for verifying the public input.\n     *\n     * @custom:field srcOutputRootProof          Proof of the source output root.\n     * @custom:field dstOutputRootProof          Proof of the destination output root.\n     * @custom:field publicInput                 Ingredients to compute the public input used by ZK proof verification.\n     * @custom:field rlps                        Pre-encoded RLPs to compute the next block hash\n     *                                           of the source output root proof.\n     * @custom:field l2ToL1MessagePasserBalance  Balance of the L2ToL1MessagePasser account.\n     * @custom:field l2ToL1MessagePasserCodeHash Codehash of the L2ToL1MessagePasser account.\n     * @custom:field merkleProof                 Merkle proof of L2ToL1MessagePasser account against the state root.\n     */\n    struct PublicInputProof {\n        OutputRootProof srcOutputRootProof;\n        OutputRootProof dstOutputRootProof;\n        PublicInput publicInput;\n        BlockHeaderRLP rlps;\n        bytes32 l2ToL1MessagePasserBalance;\n        bytes32 l2ToL1MessagePasserCodeHash;\n        bytes[] merkleProof;\n    }\n}\n"
    },
    "contracts/universal/IMultiSigWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/**\n * @title IMultiSigWallet\n * @notice Interface for contracts that are compatible with the Safe legacy MultiSigWallet.\n */\ninterface IMultiSigWallet {\n    /**\n     * @notice Emitted when anyone confirm a transaction.\n     *\n     * @param sender        Owner of address that confirm a transaction.\n     * @param transactionId Index of transaction confirmed.\n     */\n    event Confirmation(address indexed sender, uint256 indexed transactionId);\n\n    /**\n     * @notice Emitted when anyone revoke a transaction.\n     *\n     * @param sender        Owner of address that revoke a transaction.\n     * @param transactionId Index of transaction revoked.\n     */\n    event Revocation(address indexed sender, uint256 indexed transactionId);\n\n    /**\n     * @notice Emitted when anyone submit a transaction.\n     *\n     * @param transactionId Index of transaction submitted.\n     */\n    event Submission(uint256 indexed transactionId);\n\n    /**\n     * @notice Emitted when transaction is executed.\n     *\n     * @param transactionId Index of transaction executed.\n     */\n    event Execution(uint256 indexed transactionId);\n\n    /**\n     * @notice Emitted when transaction is executed but failed.\n     *\n     * @param transactionId Index of transaction failed to execute.\n     */\n    event ExecutionFailure(uint256 indexed transactionId);\n\n    /**\n     * @notice Emitted when an owner address is added.\n     *\n     * @param owner Owner address that added.\n     */\n    event OwnerAddition(address indexed owner);\n\n    /**\n     * @notice Emitted when an owner address is removed.\n     *\n     * @param owner Owner address that removed.\n     */\n    event OwnerRemoval(address indexed owner);\n\n    /**\n     * @notice Emitted when a requirement changed\n     *\n     * @param required Required value that changed.\n     */\n    event RequirementChange(uint256 required);\n\n    /**\n     * @notice Allows to add a new owner. Transaction has to be sent by wallet.\n     *\n     * @param _owner Address of new owner.\n     */\n    function addOwner(address _owner) external;\n\n    /**\n     * @notice Allows to remove an owner. Transaction has to be sent by wallet.\n     *\n     * @param _owner Address of owner.\n     */\n    function removeOwner(address _owner) external;\n\n    /**\n     * @notice Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n     *\n     * @param _owner    Address of owner to be replaced.\n     * @param _newOwner Address of new owner.\n     */\n    function replaceOwner(address _owner, address _newOwner) external;\n\n    /**\n     * @notice Allows to change the number of required confirmations.\n     *         Transaction has to be sent by wallet.\n     *\n     * @param _required Number of required confirmations.\n     */\n    function changeRequirement(uint256 _required) external;\n\n    /**\n     * @notice Allows an owner to submit and confirm a transaction.\n     *\n     * @param _destination Transaction target address.\n     * @param _value       Transaction ether value.\n     * @param _data        Transaction data payload.\n     *\n     * @return Returns transaction ID.\n     */\n    function submitTransaction(\n        address _destination,\n        uint256 _value,\n        bytes memory _data\n    ) external returns (uint256);\n\n    /**\n     * @notice Allows an owner to confirm a transaction.\n     *\n     * @param _transactionId Transaction ID.\n     */\n    function confirmTransaction(uint256 _transactionId) external;\n\n    /**\n     * @notice Allows an owner to revoke a confirmation for a transaction.\n     *\n     * @param _transactionId Transaction ID.\n     */\n    function revokeConfirmation(uint256 _transactionId) external;\n\n    /**\n     * @notice Allows anyone to execute a confirmed transaction.\n     *\n     * @param _transactionId Transaction ID.\n     */\n    function executeTransaction(uint256 _transactionId) external;\n\n    /**\n     * @notice Returns the confirmation status of a transaction.\n     *\n     * @param _transactionId Transaction ID.\n     *\n     * @return Confirmation status.\n     */\n    function isConfirmed(uint256 _transactionId) external view returns (bool);\n\n    /**\n     * @notice Returns number of confirmations of a transaction.\n     *\n     * @param _transactionId Transaction ID.\n     *\n     * @return Number of confirmations.\n     */\n    function getConfirmationCount(uint256 _transactionId) external view returns (uint256);\n\n    /**\n     * @notice Returns total number of transactions after filters are applied.\n     *\n     * @param _pending  Whether include pending transactions.\n     * @param _executed Whether include executed transactions.\n     *\n     * @return Total number of transactions after filters are applied.\n     */\n    function getTransactionCount(bool _pending, bool _executed) external view returns (uint256);\n\n    /**\n     * @notice Returns list of owners.\n     *\n     * @return The list of owner addresses.\n     */\n    function getOwners() external view returns (address[] memory);\n\n    /**\n     * @notice Returns a list of owners who have confirmed the transaction.\n     *\n     * @param _transactionId Transaction ID.\n     *\n     * @return Returns array of owner addresses.\n     */\n    function getConfirmations(uint256 _transactionId) external view returns (address[] memory);\n\n    /**\n     * @notice Returns the list of transaction IDs in defined range.\n     *\n     * @param _from     The starting index of transaction array.\n     * @param _to       The ending index of the transaction array.\n     * @param _pending  Whether include pending transactions.\n     * @param _executed Whether include executed transactions.\n     *\n     * @return List of the transaction IDs in a defined range.\n     */\n    function getTransactionIds(\n        uint256 _from,\n        uint256 _to,\n        bool _pending,\n        bool _executed\n    ) external view returns (uint256[] memory);\n}\n"
    },
    "contracts/universal/MultiSigWallet.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport {\n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport { SafeCall } from \"../libraries/SafeCall.sol\";\nimport { Types } from \"../libraries/Types.sol\";\nimport { IMultiSigWallet } from \"./IMultiSigWallet.sol\";\n\n/**\n * @custom:upgradeable\n * @title MultiSigWallet\n * @notice This contract implements `IMultiSigWallet`.\n *         Allows multiple parties to agree on transactions before execution.\n */\nabstract contract MultiSigWallet is IMultiSigWallet, ReentrancyGuardUpgradeable {\n    /**\n     * @notice A mapping of transactions submitted.\n     */\n    mapping(uint256 => Types.MultiSigTransaction) public transactions;\n\n    /**\n     * @notice A mapping of confirmations.\n     */\n    mapping(uint256 => mapping(address => bool)) public confirmations;\n\n    /**\n     * @notice A mapping that indicates whether someone is an owner or not.\n     */\n    mapping(address => bool) public isOwner;\n\n    /**\n     * @notice A list of owners.\n     */\n    address[] public owners;\n\n    /**\n     * @notice The number of confirmations required to execute a transaction.\n     */\n    uint256 public numConfirmationsRequired;\n\n    /**\n     * @notice The number of transactions submitted.\n     */\n    uint256 public transactionCount;\n\n    /**\n     * @notice Only allow this contract to call the functions.\n     *         This ensures that function is only executed through a multisig-based process.\n     */\n    modifier onlyWallet() {\n        require(\n            msg.sender == address(this),\n            \"MultiSigWallet: only allow this contract to call the functions\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Ensure that the caller is not owner.\n     *\n     * @param _addr Address resource requested.\n     */\n    modifier ownerDoesNotExist(address _addr) {\n        require(!isOwner[_addr], \"MultiSigWallet: owner exists\");\n        _;\n    }\n\n    /**\n     * @notice Ensure that the caller is owner.\n     *\n     * @param _addr Address resource requested.\n     */\n    modifier ownerExists(address _addr) {\n        require(isOwner[_addr], \"MultiSigWallet: owner does not exist\");\n        _;\n    }\n\n    /**\n     * @notice Ensure that the transaction exists.\n     *\n     * @param _transactionId Index of submitted transaction requested.\n     */\n    modifier transactionExists(uint256 _transactionId) {\n        require(\n            transactions[_transactionId].destination != address(0),\n            \"MultiSigWallet: transaction does not exist\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Ensure that the transaction with id and owner is confirmed.\n     *\n     * @param _transactionId Index of submitted transaction requested.\n     * @param _owner         Address resource requested.\n     */\n    modifier confirmed(uint256 _transactionId, address _owner) {\n        require(\n            confirmations[_transactionId][_owner],\n            \"MultiSigWallet: transaction with id and owner is not confirmed\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Ensure that the transaction with id and owner is not confirmed.\n     *\n     * @param _transactionId Index of submitted transaction requested.\n     * @param _owner         Address resource requested.\n     */\n    modifier notConfirmed(uint256 _transactionId, address _owner) {\n        require(\n            !confirmations[_transactionId][_owner],\n            \"MultiSigWallet: transaction with id and owner is confirmed\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Ensure that the transaction is not executed.\n     *\n     * @param _transactionId Index of submitted transaction requested.\n     */\n    modifier notExecuted(uint256 _transactionId) {\n        require(\n            !transactions[_transactionId].executed,\n            \"MultiSigWallet: transaction with id is already executed\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Ensure that the address is not zero address.\n     *\n     * @param _addr Address resource requested.\n     */\n    modifier validAddress(address _addr) {\n        require(_addr != address(0), \"MultiSigWallet: address is not valid\");\n        _;\n    }\n\n    /**\n     * @notice Ensure that the number of confirmations required is valid.\n     *\n     * @param _ownerCount               Number of owners.\n     * @param _numConfirmationsRequired Number of required confirmations.\n     */\n    modifier validNumConfirmations(uint256 _ownerCount, uint256 _numConfirmationsRequired) {\n        require(\n            _numConfirmationsRequired <= _ownerCount &&\n                _numConfirmationsRequired != 0 &&\n                _ownerCount != 0,\n            \"MultiSigWallet: number of required confirmation is not valid\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Initializer.\n     *\n     * @param _owners                   List of initial owners.\n     * @param _numConfirmationsRequired Number of required confirmations.\n     */\n    function initialize(address[] memory _owners, uint256 _numConfirmationsRequired)\n        public\n        onlyInitializing\n        validNumConfirmations(_owners.length, _numConfirmationsRequired)\n    {\n        for (uint256 i = 0; i < _owners.length; ) {\n            address owner = _owners[i];\n            require(!isOwner[owner], \"MultiSigWallet: owner already exists\");\n            require(owner != address(0), \"MultiSigWallet: invalid owner address\");\n            isOwner[owner] = true;\n\n            unchecked {\n                ++i;\n            }\n        }\n        owners = _owners;\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function addOwner(address _owner)\n        external\n        validAddress(_owner)\n        onlyWallet\n        ownerDoesNotExist(_owner)\n    {\n        isOwner[_owner] = true;\n        owners.push(_owner);\n        emit OwnerAddition(_owner);\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function removeOwner(address _owner) external onlyWallet ownerExists(_owner) {\n        isOwner[_owner] = false;\n        // find & delete item\n        for (uint256 i = 0; i < owners.length - 1; ) {\n            if (owners[i] == _owner) {\n                owners[i] = owners[owners.length - 1];\n                owners.pop();\n                break;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        if (numConfirmationsRequired > owners.length) {\n            _changeNumConfirmationRequirement(owners.length);\n        }\n        emit OwnerRemoval(_owner);\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function replaceOwner(address _owner, address _newOwner)\n        external\n        onlyWallet\n        validAddress(_newOwner)\n        ownerExists(_owner)\n        ownerDoesNotExist(_newOwner)\n    {\n        for (uint256 i = 0; i < owners.length; ) {\n            if (owners[i] == _owner) {\n                owners[i] = _newOwner;\n                break;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        isOwner[_owner] = false;\n        isOwner[_newOwner] = true;\n        emit OwnerRemoval(_owner);\n        emit OwnerAddition(_newOwner);\n    }\n\n    /**\n     * @notice Allows to change number of confirmations required.\n     *\n     * @param _numConfirmationsRequired Number of required confirmations.\n     */\n    function _changeNumConfirmationRequirement(uint256 _numConfirmationsRequired)\n        internal\n        validNumConfirmations(owners.length, _numConfirmationsRequired)\n    {\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function changeRequirement(uint256 _numConfirmationsRequired) external onlyWallet {\n        _changeNumConfirmationRequirement(_numConfirmationsRequired);\n        emit RequirementChange(_numConfirmationsRequired);\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function submitTransaction(\n        address _destination,\n        uint256 _value,\n        bytes memory _data\n    ) public virtual ownerExists(msg.sender) returns (uint256) {\n        uint256 transactionId = _addTransaction(_destination, _value, _data);\n        _confirmTransaction(transactionId);\n        return transactionId;\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function confirmTransaction(uint256 _transactionId) public virtual ownerExists(msg.sender) {\n        _confirmTransaction(_transactionId);\n    }\n\n    /**\n     * @notice Allows an owner to confirm a transaction.\n     *\n     * @param _transactionId Transaction ID.\n     */\n    function _confirmTransaction(uint256 _transactionId)\n        internal\n        transactionExists(_transactionId)\n        notConfirmed(_transactionId, msg.sender)\n    {\n        confirmations[_transactionId][msg.sender] = true;\n        emit Confirmation(msg.sender, _transactionId);\n        _executeTransaction(_transactionId);\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function revokeConfirmation(uint256 _transactionId)\n        external\n        virtual\n        ownerExists(msg.sender)\n        confirmed(_transactionId, msg.sender)\n        notExecuted(_transactionId)\n    {\n        confirmations[_transactionId][msg.sender] = false;\n        emit Revocation(msg.sender, _transactionId);\n    }\n\n    /**\n     * @notice Internal functions. Execute a confirmed transaction.\n     *\n     * @param _transactionId Transaction ID.\n     */\n    function _executeTransaction(uint256 _transactionId)\n        internal\n        notExecuted(_transactionId)\n        nonReentrant\n    {\n        if (_isConfirmed(_transactionId)) {\n            Types.MultiSigTransaction storage txn = transactions[_transactionId];\n            txn.executed = true;\n            bool success = SafeCall.call(txn.destination, gasleft(), txn.value, txn.data);\n            require(success, \"MultiSigWallet: call transaction failed\");\n            emit Execution(_transactionId);\n        }\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function executeTransaction(uint256 _transactionId) external ownerExists(msg.sender) {\n        _executeTransaction(_transactionId);\n    }\n\n    /**\n     * @notice Internal functions. Returns the confirmation status of a transaction.\n     *\n     * @param _transactionId Transaction ID.\n     *\n     * @return Confirmation status.\n     */\n    function _isConfirmed(uint256 _transactionId) internal view returns (bool) {\n        uint256 count = 0;\n        mapping(address => bool) storage confirmation = confirmations[_transactionId];\n        for (uint256 i = 0; i < owners.length; ) {\n            if (confirmation[owners[i]]) {\n                count += 1;\n            }\n            if (count == numConfirmationsRequired) {\n                return true;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function isConfirmed(uint256 _transactionId) external view returns (bool) {\n        return _isConfirmed(_transactionId);\n    }\n\n    /**\n     * @notice Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n     *\n     * @param _destination Transaction target address.\n     * @param _value       Transaction ether value.\n     * @param _data        Transaction data payload.\n     *\n     * @return transactionId Returns transaction ID.\n     */\n    function _addTransaction(\n        address _destination,\n        uint256 _value,\n        bytes memory _data\n    ) internal validAddress(_destination) returns (uint256 transactionId) {\n        transactionId = transactionCount;\n        transactions[transactionId] = Types.MultiSigTransaction({\n            destination: _destination,\n            value: _value,\n            data: _data,\n            executed: false\n        });\n        transactionCount += 1;\n        emit Submission(transactionId);\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function getConfirmationCount(uint256 _transactionId) external view returns (uint256) {\n        uint256 count = 0;\n        mapping(address => bool) storage confirmation = confirmations[_transactionId];\n        for (uint256 i = 0; i < owners.length; ) {\n            if (confirmation[owners[i]]) {\n                unchecked {\n                    ++count;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function getTransactionCount(bool _pending, bool _executed) external view returns (uint256) {\n        bool executed;\n        uint256 count = 0;\n        for (uint256 i = 0; i < transactionCount; ) {\n            executed = transactions[i].executed;\n            if ((_pending && !executed) || (_executed && executed)) {\n                unchecked {\n                    ++count;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        return count;\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function getOwners() external view returns (address[] memory) {\n        return owners;\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function getConfirmations(uint256 _transactionId) external view returns (address[] memory) {\n        address[] memory confirmationsTemp = new address[](owners.length);\n        uint256 count = 0;\n        uint256 i;\n        mapping(address => bool) storage confirmation = confirmations[_transactionId];\n        for (i = 0; i < owners.length; ) {\n            if (confirmation[owners[i]]) {\n                confirmationsTemp[count] = owners[i];\n                unchecked {\n                    ++count;\n                }\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n        address[] memory _confirmations = new address[](count);\n        for (i = 0; i < count; ) {\n            _confirmations[i] = confirmationsTemp[i];\n\n            unchecked {\n                ++i;\n            }\n        }\n        return _confirmations;\n    }\n\n    /**\n     * @inheritdoc IMultiSigWallet\n     */\n    function getTransactionIds(\n        uint256 _from,\n        uint256 _to,\n        bool _pending,\n        bool _executed\n    ) external view returns (uint256[] memory) {\n        bool executed;\n        uint256 count = 0;\n        uint256 i = 0;\n        uint256[] memory _transactionIdsTemp = new uint256[](_to - _from);\n        Types.MultiSigTransaction memory transaction;\n        for (i = _from; i < _to; ) {\n            transaction = transactions[i];\n            executed = transaction.executed;\n            if ((_pending && !executed) || (_executed && executed)) {\n                _transactionIdsTemp[count] = i;\n                unchecked {\n                    ++count;\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint256[] memory _transactionIds = new uint256[](count);\n        for (i = 0; i < count; ) {\n            _transactionIds[i] = _transactionIdsTemp[i];\n\n            unchecked {\n                ++i;\n            }\n        }\n        return _transactionIds;\n    }\n}\n"
    },
    "contracts/universal/Semver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.15;\n\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @title Semver\n * @notice Semver is a simple contract for managing contract versions.\n */\ncontract Semver {\n    /**\n     * @notice Contract version number (major).\n     */\n    uint256 private immutable MAJOR_VERSION;\n\n    /**\n     * @notice Contract version number (minor).\n     */\n    uint256 private immutable MINOR_VERSION;\n\n    /**\n     * @notice Contract version number (patch).\n     */\n    uint256 private immutable PATCH_VERSION;\n\n    /**\n     * @param _major Version number (major).\n     * @param _minor Version number (minor).\n     * @param _patch Version number (patch).\n     */\n    constructor(\n        uint256 _major,\n        uint256 _minor,\n        uint256 _patch\n    ) {\n        MAJOR_VERSION = _major;\n        MINOR_VERSION = _minor;\n        PATCH_VERSION = _patch;\n    }\n\n    /**\n     * @notice Returns the full semver contract version.\n     *\n     * @return Semver contract version as a string.\n     */\n    function version() public view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(\n                    Strings.toString(MAJOR_VERSION),\n                    \".\",\n                    Strings.toString(MINOR_VERSION),\n                    \".\",\n                    Strings.toString(PATCH_VERSION)\n                )\n            );\n    }\n}\n"
    },
    "node_modules/@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "node_modules/@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "node_modules/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/=node_modules/@openzeppelin/",
      "@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/",
      "@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/",
      "@rari-capital/=node_modules/@rari-capital/",
      "@rari-capital/solmate/=node_modules/@rari-capital/solmate/",
      "ds-test/=node_modules/ds-test/src/",
      "forge-std/=node_modules/forge-std/src/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 10000
    },
    "metadata": {
      "bytecodeHash": "none"
    },
    "outputSelection": {
      "*": {
        "": [
          "ast"
        ],
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata"
        ]
      }
    },
    "evmVersion": "london",
    "libraries": {}
  }
}